package p01_Database;

import org.junit.Before;
import org.junit.Test;

import javax.naming.OperationNotSupportedException;

import static org.junit.Assert.assertEquals;

public class DatabaseTest {

    private Database database;
    private static final Integer[] NUMBERS = {5, 8 , 21, 68, 81, 1, 2};

    @Before
    public void prepare() throws OperationNotSupportedException {
        database = new Database(NUMBERS);
    }

    @Test
    public void test_CreateDatabase() throws OperationNotSupportedException {

        Integer[] dbElements = database.getElements();
        assertEquals(NUMBERS.length, dbElements.length);

        for (int i = 0; i < NUMBERS.length; i++) {
            assertEquals(NUMBERS[i], dbElements[i]);
        }
    }

    @Test(expected = OperationNotSupportedException.class)
    public void test_ConstructorWithLessThanOneArgument() throws OperationNotSupportedException {
        Database database = new Database();
    }

    @Test(expected = OperationNotSupportedException.class)
    public void test_ConstructorWithMoreThanSixteenArguments() throws OperationNotSupportedException {
        Database database = new Database(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17);
    }

    @Test(expected = OperationNotSupportedException.class)
    public void test_AddWithNullArgumentShouldThrow() throws OperationNotSupportedException {
        database.add(null);
    }

    @Test
    public void test_AddSuccessfully() throws OperationNotSupportedException {

        int initialSize = database.getElements().length;

        database.add(12);

        Integer[] dbElements = database.getElements();
        int lastElementFromDB = dbElements[dbElements.length - 1];
        int expected = 12;

        assertEquals(expected, lastElementFromDB);

        assertEquals(initialSize + 1, dbElements.length);
    }

    public void test_RemoveSuccessfully() throws OperationNotSupportedException {

        int initialSize = database.getElements().length;
        database.remove();
        Integer[] currentElements = database.getElements();

        assertEquals(initialSize - 1, currentElements.length);

        int secondToLastBeforeDelete = NUMBERS[NUMBERS.length - 2];
        int lastBeforeDelete = NUMBERS[NUMBERS.length - 1];

        assertEquals(secondToLastBeforeDelete, lastBeforeDelete);

    }

    @Test(expected = OperationNotSupportedException.class)
    public void test_ShouldThrowForEmptyDatabase() throws OperationNotSupportedException {

        for (int i = 0; i < NUMBERS.length; i++) {
            database.remove();
        }

        database.remove();
    }
}
